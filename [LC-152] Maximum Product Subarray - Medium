[LC-152] Maximum Product Subarray - Medium

Given an integer array nums, find a subarray that has the largest product, and return the product.
The test cases are generated so that the answer will fit in a 32-bit integer.

Example 1:
Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Example 2:
Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

Constraints:
1 <= nums.length <= 2 * 10^4
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

[C++] Solution:

//TC: O(N) + O(N)
//SC: O(1)
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n=nums.size();
        int maxPro=nums[0];
        int currPro = 1;

        //from left
        for(int i=0; i<n; i++){
            currPro *= nums[i];
            if(currPro>maxPro){
                maxPro=currPro;
            }
            if(currPro==0){
                currPro=1;
            }
        }

        //first set currPro=1
        currPro=1;

        //from right
        for(int i=n-1; i>=0; i--){
            currPro *= nums[i];
            if(currPro>maxPro){
                maxPro=currPro;
            }
            if(currPro==0){
                currPro=1;
            }
        }
        return maxPro;
    }
};
