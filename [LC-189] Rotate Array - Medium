[LC-189] Rotate Array - Medium

Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Example 2:
Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]

Constraints:
1 <= nums.length <= 10^5
-2^31 <= nums[i] <= 2^31 - 1
0 <= k <= 10^5

Follow up:
Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.
Could you do it in-place with O(1) extra space?

[C++] Solution:

//Method 1:
//TC: O(N)
//SC: O(N)
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        if(k==0 || k<=0)
            return;
        
        int n=nums.size();
        int i=0;
        int arr[n];
        for(i=0; i<n; i++){
            arr[i] = nums[i];
        }
        for(int i=0; i<n; i++){
            nums[(i+k)%n] = arr[i]; //(i+k) for right shift and (i-k) for left shift.
        }
    }
};

//Method 2:
//TC: O(N) + O(N)
//SC: O(1)
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        if(k==0 || k<=0)
            return;
        
        int n=nums.size();
        k %= n;

        reverse(nums.begin(), nums.end()); //reverse function is O(1) space.
        reverse(nums.begin(), nums.begin() + k);
        reverse(nums.begin() + k, nums.end());
    }
};
