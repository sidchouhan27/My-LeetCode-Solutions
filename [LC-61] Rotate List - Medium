[LC-61] Rotate List - Medium

Given the head of a linked list, rotate the list to the right by k places.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Example 2:
Input: head = [0,1,2], k = 4
Output: [2,0,1]

Constraints:
The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 10^9

[C++] Solution:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

 //TC: O(N)
 //SC: O(1)
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head==nullptr){
            return head;
        }
        ListNode* tail=head;
        int len=1;
        //find length of LL
        while(tail->next!=nullptr){
            tail=tail->next;
            len++;
        }
        //make ciecular LL
        tail->next=head;
        k=k%len; //if k>len
        int newHead = len-k;
        //find new tail
        for(int i=0; i<newHead; i++){
            tail=tail->next;
        }
        //put head=tail->next
        head=tail->next;
        //put tail->next=nullptr
        tail->next=nullptr;
        return head;
    }
};
