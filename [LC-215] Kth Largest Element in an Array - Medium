[LC-215] Kth Largest Element in an Array - Medium

Given an integer array nums and an integer k, return the kth largest element in the array.
Note that it is the kth largest element in the sorted order, not the kth distinct element.
Can you solve it without sorting?

Example 1:
Input: nums = [3,2,1,5,6,4], k = 2
Output: 5

Example 2:
Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4

Constraints:
1 <= k <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4

[C++] Solution:

//Ascending Sort
//TC: O(NlogN)
//SC: O(1)
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
	    return nums[nums.size()-k];
    }
};

//Descending Sort
//TC: O(NlogN)
//SC: O(1)
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end(), greater<int>());
	    return nums[k-1];
    }
};

//Max Heap
//TC: O(logN)
//SC: O(N)
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int> pq (nums.begin(), nums.end());
        for(int i=0; i<k-1; i++){
            pq.pop();
        }
        return pq.top();
    }
};

//Min Heap
//TC: O(logN)
//SC: O(N)
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int, vector<int>, greater<int>> pq;
        for(int val: nums){
            pq.push(val);
            if(pq.size()>k)
                pq.pop();
        }
        return pq.top();
    }
};
