[LC:349] Intersection of Two Arrays - Easy

Given two integer arrays nums1 and nums2, return an array of their intersection. 
Each element in the result must be unique and you may return the result in any order.

Example 1:
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]

Example 2:
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.

Constraints:
1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000

[C++] Solution:

//Method 1:
//TC: O(MlogM) [sort first array] + O(NlogN) [sort second array] + O(M + N) [Two Pointer]
//SC: O(Intersection/no. of common values)
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        set<int> s;
        vector<int> res;
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());

        int i=0, j=0;

        while(i<nums1.size() && j<nums2.size()){
            if(nums1[i]<nums2[j])
                i++;

            else if(nums1[i]>nums2[j])
                j++;

            else{
                s.insert(nums1[i]);
                i++;
                j++;
            }
        }
        for (auto& it : s) {
            res.push_back(it);
        }
        return res;
    }
};

//Method 2:
//TC: O(MlogN) [binary search] + O(NlogN) [sorting] assuming N<M
//SC: O(Intersection/no. of common values)
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        vector<int> res;
        set<int> s;
        int m=nums1.size();
        int n=nums2.size();

        if(m<n){
            sort(nums1.begin(), nums1.end());
            for(int i=0; i<n; i++){
                if(binarySearch(nums1, nums2[i])){
                    s.insert(nums2[i]);
                }
            }
            for (auto& it : s) {
            res.push_back(it);
            }
            return res;
        }
        else{
            sort(nums2.begin(), nums2.end());
            for(int i=0; i<m; i++){
                if(binarySearch(nums2, nums1[i])){
                    s.insert(nums1[i]);
                }
            }
            for (auto& it : s) {
            res.push_back(it);
            }
            return res;
        }
    }


    bool binarySearch(vector<int> nums, int n){
        int size=nums.size();
        int left=0;
        int right=size-1;

        while(left<=right){
            int mid = left + (right-left)/2;
            if (n==nums[mid])
                return true;

            else if(n<nums[mid]){
                right=mid-1;
            }

            else{
                left = mid+1;
            }
        }
        return false;
    }
};

//Method 3:
//TC: O(M) + O(N)
//SC: O(Intersection/no. of common values) + O(array)
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        set<int> s;
        set<int> answer;
        vector<int> res;
        
        int m=nums1.size();
        int n=nums2.size();
        int i=0;

        for(i=0; i<m; i++){
            s.insert(nums1[i]);
        }

        for(i=0; i<n; i++){
            if(s.contains(nums2[i]))
                answer.insert(nums2[i]);
        }

        for (auto& it : answer) {
            res.push_back(it);
            }
            return res;

    }
};
