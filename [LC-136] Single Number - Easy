[LC-136] Single Number - Easy

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space.

Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
Input: nums = [1]
Output: 1

Constraints:
1 <= nums.length <= 3 * 10^4
-3 * 10^4 <= nums[i] <= 3 * 10^4
Each element in the array appears twice except for one element which appears only once.

[C++] Solution:

//Using Sort and Compare
//TC: O(NlogN) + O(N/2)
//SC: O(1)
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int i=0;

        for(i=1; i<nums.size(); i+=2){
            if(nums[i]!=nums[i-1])
                return nums[i-1];
        }
        return nums[nums.size()-1];
    }
};

//Using Map
//TC: O(N)
//SC: O(N)
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        unordered_map<int,int> a;
	    for(auto x: nums)
		    a[x]++;
	    for(auto z:a)
		    if(z.second==1)
		 	    return z.first;
	    return -1;
    }
};

//Using Set
//TC: O(N)
//SC: O(N)
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        set<int> s;
        for(auto& it : nums){
            s.insert(it);
        }
        int sum=0, asum=0;
        for(auto& it : s){
            sum+=it;
        }
        for(auto& it : nums){
            asum+=it;
        }
        int ans=2*sum-asum;
        return ans;
    }
};

//Using XOR
//TC: O(N)
//SC: O(1)
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ans=0;
        for(int i=0; i<nums.size(); i++)
            ans^=nums[i];
        return ans;
    }
};
