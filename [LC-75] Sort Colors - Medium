[LC-75] Sort Colors - Medium

Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]

Constraints:
n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.

Follow up: Could you come up with a one-pass algorithm using only constant extra space?

[C++] Solution:

//Two Pass
//TC: O(2N)
//SC: O(1)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        int zero=0;
        int one=0;
        int two=0;
        int i=0;

        for(i=0; i<n; i++){
            if(nums[i]==0)
                zero++;
            if(nums[i]==1)
                one++;
            if(nums[i]==2)
                two++;
        }

        for(i=0; i<zero; i++){
            nums[i]=0;
        }
        for(i=0; i<one; i++){
            nums[zero + i]=1;
        }
        for(i=0; i<two; i++){
            nums[zero + one + i]=2;
        }
    }
};

// One Pass
//TC: O(N)
//SC: O(1)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int i=0;
        int n=nums.size();
        int start=0, end=n-1;

        while(i<=end){
            if(nums[i]==0){
                swap(nums[i], nums[start]);
                start++;
                i++;
            }

            else if(nums[i]==1)
                i++;
            
            else{
                swap(nums[i], nums[end]);
                end--;
            }
        }
    }
};
