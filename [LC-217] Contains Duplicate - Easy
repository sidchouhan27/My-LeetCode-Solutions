[LC-217] Contains Duplicate - Easy

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

Example 1:
Input: nums = [1,2,3,1]
Output: true

Example 2:
Input: nums = [1,2,3,4]
Output: false

Example 3:
Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true

Constraints:
1 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9

[C++] Solution:

//Using find method
//TC: O(N^2)
//SC: O(N)
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        vector<int> res;
        for(int i=0; i<nums.size(); i++){
            if(find(res.begin(), res.end(), nums[i])!=res.end())
                return true;
            res.push_back(nums[i]);
        }
        return false;
    }
};

//Using nested loops
//TC: O(N^2)
//SC: O(1)
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        int i=0, j=0;
        for(i=0; i<nums.size(); i++){
            for(j=i+1; j<nums.size(); j++){
                if(nums[i]==nums[j])
                    return true;
            }
        }
        return false;
    }
};

//Using XOR
//TC: O(N^2)
//SC: O(1)
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        int i=0, j=0;
        for(i=0; i<nums.size(); i++){
            for(j=i+1; j<nums.size(); j++){
                int x = nums[i]^nums[j];
                if(x==0)
                    return true;
            }
        }
        return false;
    }
};

//Using Sorting
//TC: O(NlogN)
//SC: O(1)
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        for(int i=1; i<nums.size(); i++){
            if(nums[i]==nums[i-1]){
                return true;
            }
        }
        return false;
    }
};

//Using Set
//TC: O(N)
//SC: O(N)
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        set<int> set (nums.begin(), nums.end());
        if(set.size()!=nums.size())
            return true;
        else
            return false;
    }
};

//Using Set
//TC: O(N)
//SC: O(N)
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        set<int> set;
        for(int i=0; i<nums.size(); i++){
            if(set.find(nums[i])!=set.end())
                return true;
            set.insert(nums[i]);
        }
        return false;
    }
};

//Using Map
//TC: O(N)
//SC: O(N)
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        unordered_map<int, int> map;
        for(int i=0; i<nums.size(); i++){
            if(map.find(nums[i])!=map.end())
                return true;
            map[nums[i]]++;
        }
        return false;
    }
};

//Using Map
//TC: O(N)
//SC: O(N)
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        unordered_map<int, int> map;
        for(int i=0; i<nums.size(); i++){
            map[nums[i]]++;
            if(map.at(nums[i])==2)
                return true;
        }
        return false;
    }
};
