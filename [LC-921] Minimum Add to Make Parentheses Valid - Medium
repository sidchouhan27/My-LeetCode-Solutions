[LC-921] Minimum Add to Make Parentheses Valid - Medium

A parentheses string is valid if and only if:
It is the empty string,
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.

For example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))".
Return the minimum number of moves required to make s valid.

Example 1:
Input: s = "())"
Output: 1

Example 2:
Input: s = "((("
Output: 3

Constraints:
1 <= s.length <= 1000
s[i] is either '(' or ')'.

[C++] Solution:

//Using Stack: Keep a variable close=0. We run a loop over the string. If we encounter '(' then we push it in stack. 
//Else (now we can only encounter ')') if stack is empty, close++. 
//Else stack.pop(). In the end, return stack.size()+close.
//TC: O(N)
//SC: O(N)

class Solution {
public:
    int minAddToMakeValid(string s) {
        stack<char> st;
        int close=0;
        for(int i=0; i<s.size(); i++){
            if(s[i]=='(')
                st.push(s[i]);
            else if(st.empty()){
                close++;
            }
            else{
                st.pop();
            }
        }
        return st.size() + close;
    }
};

Approach 2:
//TC: O(N)
//SC: O(1)

class Solution {
public:
    int minAddToMakeValid(string s) {
        int open=0, close=0;
        for(int i=0; i<s.size(); i++){
            if(s[i]=='('){
                close++;
            }
            else if(close>0){
                close--;
            }
            else{
                open++;
            }
        }
        return open + close;
    }
};
