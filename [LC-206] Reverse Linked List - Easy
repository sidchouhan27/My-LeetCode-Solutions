[LC-206] Reverse Linked List - Easy

Given the head of a singly linked list, reverse the list, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Example 2:
Input: head = [1,2]
Output: [2,1]

Example 3:
Input: head = []
Output: []

Constraints:

The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000

Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?

[C++] Solution:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 /*

//Using Stack:
//TC: O(N)
//SC: O(N)
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head == nullptr || head->next == nullptr)
            return head;

        stack<ListNode*> st;
        ListNode* temp=head;
        
        while(temp!=nullptr){
            st.push(temp);
            temp=temp->next;
        }
        head=st.top();
        temp=st.top();
        st.pop();
        while(!st.empty()){
            temp->next=st.top();
            temp=st.top();
            st.pop();
        }
        temp->next=nullptr;
        return head;
    }
};


//Using 3 Pointers - Iterative:
//TC: O(N)
//SC: O(1)
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head == nullptr || head->next == nullptr)
            return head;
        
        ListNode* nxt=nullptr;
        ListNode* prev=nullptr;
        ListNode* current=head;
        while(current!=nullptr){
            nxt=current->next;
            current->next=prev;
            prev=current;
            current=nxt;
        }
        head=prev;
        return head;
    }
};
*/

//Using 3 Pointers - Recursive:
//TC: O(N)
//SC: O(1)
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==nullptr || head->next==nullptr){
            return head;
        }
        ListNode* node = reverseList(head->next);
        head->next->next=head;
        head->next=nullptr;
        return node;
    }
};
