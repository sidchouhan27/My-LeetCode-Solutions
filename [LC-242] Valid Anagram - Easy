[LC-242] Valid Anagram - Easy

Given two strings s and t, return true if t is an anagram of s, and false otherwise.
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Example 1:
Input: s = "anagram", t = "nagaram"
Output: true

Example 2:
Input: s = "rat", t = "car"
Output: false

Constraints:
1 <= s.length, t.length <= 5 * 10^4
s and t consist of lowercase English letters.

Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?

[C++] Solution:

Method 1:
//Sort both the strings and after sorting, if str1==str2 return true, otherwise return false.
//TC: O(2*NlogN)
//SC: O(1)
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size()!=t.size()){
            return false;
        }
        if(s==t){
            return true;
        }
        
        sort(s.begin(), s.end());
        sort(t.begin(), t.end());

        return s==t;
    }
};

Method 2:
//Use a map and increase frequency for first string and simultaneously decrease frequency by 1 for second string. Lastly, in a loop if map.second!=0, return false otherwise return true.
//TC: O(N) + O(26)
//SC: O(26)
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size()!=t.size()){
            return false;
        }
        if(s==t){
            return true;
        }

        unordered_map<int,int> map;

        for(int i=0; i<s.size(); i++){
            map[s[i]]++;
            map[t[i]]--;
        }
        for(auto it: map){
            if(it.second){
                return false;
            }
        }
        return true;
    }
};

Method 3:
//Using array: Create an array (arr) of size 26. Set each value to 0 in array. 
//Now, for(int i=0; i<s.size(); i++) perform arr[s[i]-'a']++ and arr[t[i]-'a']--. 
//Then in the end, return false if any element in the arr is not zero otherwise return true.
//TC: O(N) + O(26)
//SC: O(26)
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size()!=t.size())
            return false;
        if(s==t)
            return true;
        int arr[26];
        int i=0;
        for(i=0; i<26; i++)
            arr[i]=0;
        for(i=0; i<s.size(); i++){
            arr[s[i] - 'a']++;
            arr[t[i] - 'a']--;
        }
        for(i=0; i<26; i++){
            if(arr[i]!=0){
                return false;
            }
        }
        return true;
    }
};
